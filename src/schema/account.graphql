type Account implements Node {
  id: Binary!
  name: String!
  email: EmailAddress!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Authentication {
  token: String!
}

input SignUpInput {
  email: EmailAddress!
  name: String!
  password: String!
}

type Mutation {
  """
  Sign up a user and get an access token if successful.

  ## Error Codes
  	* `BAD_USER_INPUT` - Email address already used.
  """
  signUp(input: SignUpInput!): Authentication!

  """
  Authenticate a user to get an access token if credentials are valid.

  ## Error Codes
  	* `BAD_USER_INPUT` - Invalid credentials.
  """
  authenticate(input: AuthenticateInput!): Authentication!
}

type Query {
  me: Account! @private
  status: String
}

input SignUpInput {
  email: EmailAddress!
  name: String!
  password: String!
}

input AuthenticateInput {
  email: EmailAddress!
  password: String!
}
