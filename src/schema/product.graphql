# product.schema.graphql
type Product implements Node {
  id: Binary!
  name: String!
  description: String!
  owner: Account!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product! @private
  updateProduct(input: UpdateProductInput!): Product! @private
  deleteProduct(input: DeleteProductInput!): Boolean! @private
}

type Query {
  products(
    first: Int = 10
    after: Binary
    filter: ProductsFilter
    sort: ProductSortInput
  ): ProductConnection!
}

input CreateProductInput {
  name: String!
  description: String!
}

input UpdateProductInput {
  id: Binary!
  body: UpdateProductBody!
}

input UpdateProductBody {
  name: String
  description: String
}

input DeleteProductInput {
  id: Binary!
}

input ProductsFilter {
  id: BinaryQueryOperatorInput
  name: StringQueryOperatorInput
}

input ProductSortInput {
  name: Int
}

input BinaryQueryOperatorInput {
  eq: Binary
  ne: Binary
  in: [Binary!]
  nin: [Binary!]
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String!]
  nin: [String!]
  startsWith: String
  contains: String
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: Binary
}

type ProductEdge {
  cursor: Binary!
  node: Product!
}
